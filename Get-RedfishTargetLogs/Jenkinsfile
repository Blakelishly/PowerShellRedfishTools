pipeline {
    agent any  // Use any available Jenkins agent

    environment {
        DOCKER_FILE_PATH                = './Dockerfile'                      // Path to the Dockerfile
        REPO_WORKING_DIRECTORY          = "./Get-RedfishTargetLogs"           // Path to your PowerShell Code in the repo
        REPO_URL                        = "https://github.com/Blakelishly/PowerShellRedfishTools.git"   // Repository URL passed as a parameter
        BRANCH_NAME                     = "main"                                                        // Branch name passed as a parameter
        TARGET_CREDENTIALS_ID           = 'target-server-credentials'         // Descriptive ID of the Jenkins credentials for target server
    }

    stages {
        stage('Clone repository') {
            steps {
                git branch: "${BRANCH_NAME}", 
                    url: "${REPO_URL}", 
                    changelog: false, 
                    poll: false
            }
        }

        stage('Hash Dockerfile') {
            steps {
                script {
                    // Ensure the Dockerfile exists
                    if (!fileExists(DOCKER_FILE_PATH)) {
                        error "Dockerfile not found at ${DOCKER_FILE_PATH}"
                    }

                    // Generate a hash of the Dockerfile
                    def dockerfileHash = sh(
                        script: "sha256sum ${DOCKER_FILE_PATH} | awk '{ print \$1 }'",
                        returnStdout: true
                    ).trim()

                    // Use the Dockerfile hash as part of the Docker image tag
                    env.DOCKER_IMAGE = "deployment-img:${dockerfileHash}"
                    echo "ðŸ”¨ Dockerfile hash: ${dockerfileHash}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "ðŸ”¨ Building Docker image ${DOCKER_IMAGE}."
                    docker.build("${DOCKER_IMAGE}", "--file ${DOCKER_FILE_PATH} .")
                }
            }
        }

        stage('Run with Docker Agent') {
            agent {
                docker {
                    image "${DOCKER_IMAGE}"                            // Use the newly built Docker image as the agent
                    args "-v \"${env.WORKSPACE}\":/workspace"          // Mount the workspace into the container
                    reuseNode true                                     // Keep the container running between stages
                }
            }
            environment {
                TARGET_CREDENTIALS = credentials("${TARGET_CREDENTIALS_ID}") // Bind target credentials
            }
            steps {
                script {
                    // Define the PowerShell script path
                    def psScriptPath = "${REPO_WORKING_DIRECTORY}/Get-RedfishTargetLogs.ps1"

                    // Execute the PowerShell script with necessary parameters
                    powershell """
                        pwsh -File "${psScriptPath}" `
                            -TargetURIs '${TARGET_URIs}' `
                            -Credential (New-Object PSCredential('${TARGET_CREDENTIALS_USR}', (ConvertTo-SecureString '${TARGET_CREDENTIALS_PSW}' -AsPlainText -Force))) `
                            -OutputDirectory '/workspace/Output' `
                            -PropertyMappingFile '/workspace/Get-RedfishTargetLogs/PropertyMappings.json' `
                            -JSONOutput $true
                    """
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'Output/**/*', fingerprint: true
            // Optionally remove the Docker image
            // sh "docker rmi ${DOCKER_IMAGE} || true"
        }
        success {
            echo "Pipeline completed successfully."
        }
        failure {
            echo "Pipeline failed. Check logs for details."
        }
    }
}
